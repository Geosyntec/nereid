[build-system]
requires = ["setuptools>=64.0"]
build-backend = "setuptools.build_meta"

[project]
name = "nereid-engine"
description = "Water quality engine for computing graph-based land surface load aggregation and BMP effectiveness."
readme = "README.md"
requires-python = ">=3.10"
license = { "text" = "BSD-3-Clause" }
# url = "https://github.com/Geosyntec/nereid"
authors = [{ name = "Austin Orr", email = "aorr@geosyntec.com" }]
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Framework :: Celery",
    "Framework :: Pydantic",
    "License :: OSI Approved :: BSD License",
]
dependencies = [
    "networkx",
    "orjson",
    "pandas",
    "Pint",
    "pydantic>=2",
    "pydantic_settings",
    "python-dotenv",
    "pytz",
    "PyYAML",
    "scipy",
]
dynamic = ["version"]

[project.scripts]
nereid-app = "nereid.main:main"

[tool.setuptools.dynamic]
version = { attr = "nereid.__version__" }

[tool.setuptools.packages.find]
where = ["nereid"]

[tool.setuptools.package-data]
"*" = ["*"]

[tool.setuptools.exclude-package-data]
"*" = ["_no_git*"]

[project.optional-dependencies]
extras = ["graphviz", "matplotlib", "pydot"]
async-worker = ["celery[redis]", "nereid-engine[extras]"]
base-app = [
    "fastapi",
    "brotli-asgi",
    "jinja2",
    "uvicorn",
    "uvloop",
    "websockets",
]
app = ["nereid-engine[async-worker]", "nereid-engine[base-app]"]
test = ["coverage", "httpx", "pytest", "pytest-cov", "pytest-xdist"]
dev = [
    "nereid-engine[app]",
    "nereid-engine[test]",
    "mypy",
    "pre-commit>=3.3.3,<4.0.0",
    "ruff",
]

[tool.pytest.ini_options]
filterwarnings = [
    # todo: remove after networkx.drawing.nx_pylab is updated for numpy>=2.0.0
    "ignore:`alltrue` is deprecated.:DeprecationWarning",
    "ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning",
]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "PERF", # Perflint
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"**/{tests,watershed}/*" = [
    "C901", # too complex
]
"**/{api,tests}/*" = [
    "B008", # do not perform function calls in argument defaults
]
"**/nereid/factory.py" = [
    "B008", # do not perform function calls in argument defaults
]

[[tool.mypy.overrides]]
module = "nereid.*"
disable_error_code = ["func-returns-value"]

[[tool.mypy.overrides]]
module = "nereid.tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "brotli_asgi",
    "celery.*",
    "matplotlib.*",
    "networkx",
    "pandas",
    "scipy.interpolate",
    "pydantic_settings",
]
ignore_missing_imports = true
